@use "sass:math";
@use 'base';

/*
 * Spring
 */
@mixin hamburger(
  $hamburger-padding-x           : 15px,
  $hamburger-padding-y           : 15px,
  $hamburger-layer-width         : 40px,
  $hamburger-layer-height        : 4px,
  $hamburger-layer-spacing       : 6px,
  $hamburger-layer-color         : #000,
  $hamburger-layer-border-radius : 4px,
  $hamburger-hover-opacity       : 0.7,
  $hamburger-active-layer-color  : $hamburger-layer-color,
  $hamburger-active-hover-opacity: $hamburger-hover-opacity,
  
  // To use CSS filters as the hover effect instead of opacity,
  // set $hamburger-hover-use-filter as true and
  // change the value of $hamburger-hover-filter accordingly.
  $hamburger-hover-use-filter   : false,
  $hamburger-hover-filter       : opacity(50%),
  $hamburger-active-hover-filter: $hamburger-hover-filter,
) {
  @include base.singleton(
    $hamburger-padding-x,
    $hamburger-padding-y,
    $hamburger-layer-width,
    $hamburger-layer-height,
    $hamburger-layer-spacing,
    $hamburger-layer-color,
    $hamburger-layer-border-radius,
    $hamburger-hover-opacity,
    $hamburger-active-layer-color,
    $hamburger-active-hover-opacity,
    
    // To use CSS filters as the hover effect instead of opacity,
    // set $hamburger-hover-use-filter as true and
    // change the value of $hamburger-hover-filter accordingly.
    $hamburger-hover-use-filter,
    $hamburger-hover-filter,
    $hamburger-active-hover-filter,
  );

  .hamburger--spring {
    .hamburger-inner {
      top: math.div($hamburger-layer-height, 2);
      transition: background-color 0s 0.13s linear;

      &::before {
        top: $hamburger-layer-height + $hamburger-layer-spacing;
        transition: top 0.1s 0.2s cubic-bezier(0.33333, 0.66667, 0.66667, 1),
                    transform 0.13s cubic-bezier(0.55, 0.055, 0.675, 0.19);
      }

      &::after {
        top: ($hamburger-layer-height * 2) + ($hamburger-layer-spacing * 2);
        transition: top 0.2s 0.2s cubic-bezier(0.33333, 0.66667, 0.66667, 1),
                    transform 0.13s cubic-bezier(0.55, 0.055, 0.675, 0.19);
      }
    }

    &.is-active {
      .hamburger-inner {
        transition-delay: 0.22s;
        background-color: transparent !important;

        &::before {
          top: 0;
          transition: top 0.1s 0.15s cubic-bezier(0.33333, 0, 0.66667, 0.33333),
                      transform 0.13s 0.22s cubic-bezier(0.215, 0.61, 0.355, 1);
          transform: translate3d(0, $hamburger-layer-spacing + $hamburger-layer-height, 0) rotate(45deg);
        }

        &::after {
          top: 0;
          transition: top 0.2s cubic-bezier(0.33333, 0, 0.66667, 0.33333),
                      transform 0.13s 0.22s cubic-bezier(0.215, 0.61, 0.355, 1);
          transform: translate3d(0, $hamburger-layer-spacing + $hamburger-layer-height, 0) rotate(-45deg);
        }
      }
    }
  }
}
